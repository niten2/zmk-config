/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <219>; };

&mt { quick_tap_ms = <219>; };

/ {
    behaviors {
        tdF: tap_dance_lang1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp F>, <&kp LG(F11)>;
        };

        tdJ: tap_dance_lang2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <100>;
            bindings = <&kp J>, <&kp LG(F12)>;
        };

        lh_pht: left_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>;                        // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5>;    // <---[[right-hand keys]]
        };
    };

    combos {
        compatible = "zmk,combos";

        ParaLeft {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <4 5>;
            timeout-ms = <20>;
        };

        ParaRight {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <6 7>;
            timeout-ms = <20>;
        };

        BrakLeft {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <16 17>;
            timeout-ms = <20>;
        };

        BrakRight {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <18 19>;
            timeout-ms = <20>;
        };

        BraceLeft {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <28 29>;
            timeout-ms = <20>;
        };

        BraceRight {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <30 31>;
            timeout-ms = <20>;
        };

        DoubleQuote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <15 16>;
            timeout-ms = <20>;
        };

        SingleQuote {
            bindings = <&kp APOSTROPHE>;
            key-positions = <19 20>;
            timeout-ms = <20>;
        };

        //LangRu {
        //    bindings = <&kp LG(F11)>;
        //    key-positions = <0 1>;
        //    timeout-ms = <20>;
        //};
        //LangUs {
        //   bindings = <&kp LG(F12)>;
        //    key-positions = <10 11>;
        //    timeout-ms = <20>;
        //};
        //LangRuL {
        //    bindings = <&kp LG(F11)>;
        //    key-positions = <36 38>;
        //    timeout-ms = <20>;
        //};
        //LangUsL {
        //    bindings = <&kp LG(F12)>;
        //    key-positions = <39 41>;
        //    timeout-ms = <20>;
        //};

        TildaSign {
            bindings = <&kp TILDE>;
            key-positions = <0 12>;
            timeout-ms = <20>;
        };

        GraveSign {
            bindings = <&kp GRAVE>;
            key-positions = <12 24>;
            timeout-ms = <20>;
        };

        MinusSign {
            bindings = <&kp MINUS>;
            key-positions = <3 4>;
            timeout-ms = <20>;
        };

        PlusSign {
            bindings = <&kp PLUS>;
            key-positions = <2 3>;
            timeout-ms = <20>;
        };

        UnderscoreSign {
            bindings = <&kp UNDERSCORE>;
            key-positions = <7 8>;
            timeout-ms = <20>;
        };

        PipeSign {
            bindings = <&kp PIPE>;
            key-positions = <8 9>;
            timeout-ms = <20>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &kp Q  &kp W  &kp E     &kp R         &kp T          &kp Y        &kp U     &kp I  &kp O  &kp P  &none
&none  &kp A  &kp S  &kp D     &kp F         &kp G          &kp H        &kp J     &kp K  &kp L  &none  &none
&none  &kp Z  &kp X  &kp C     &kp V         &kp B          &kp N        &kp M     &none  &none  &none  &none
                     &kp LALT  &kp LEFT_GUI  &lt 1 SPACE    &lt 1 ENTER  &kp BSPC  &sl 2
            >;
        };

        lower_layer {
            bindings = <
&none  &none  &none     &kp UP    &none      &none        &kp ASTRK  &kp N7     &kp N8     &kp N9  &kp MINUS  &none
&none  &none  &kp LEFT  &kp DOWN  &kp RIGHT  &none        &kp SLASH  &kp N4     &kp N5     &kp N6  &kp PLUS   &none
&none  &none  &none     &none     &none      &none        &kp N0     &kp N1     &kp N2     &kp N3  &kp DOT    &none
                        &to L0    &kp BSPC   &kp LSHFT    &kp KP_N1  &kp KP_N2  &kp KP_N3
            >;
        };

        raise_layer {
            bindings = <
&bootloader  &sys_reset    &out OUT_TOG  &none         &none         &none           &none   &none   &none   &none  &none  &none
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none   &none   &none   &none  &none  &none
&none        &kp KP_NUM    &none         &none         &none         &none           &none   &none   &none   &none  &none  &none
                                         &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &sys_reset    &out OUT_TOG  &none         &none         &none           &none   &none   &none   &none  &none  &none
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none   &none   &none   &none  &none  &none
&none        &kp KP_NUM    &none         &none         &none         &none           &none   &none   &none   &none  &none  &none
                                         &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
